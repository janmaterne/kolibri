name: 01 - Publish

env:
  access: public
  registry: https://registry.npmjs.org
  token: ${{ secrets.NPMJS_GRANULAR_TOKEN }}
  prefix: v1

on:
  workflow_dispatch:
    inputs:
      tag:
        type: choice
        description: Which NPM tag should be assigned?
        options:
          - dev
          - next
          - latest
      version: # see https://github.com/lerna/lerna/tree/main/libs/commands/version#semver-bump
        type: choice
        description: Semver keyword for version bump
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  publish:
    if: github.repository == 'public-ui/kolibri'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      # https://github.com/pnpm/action-setup#use-cache-to-reduce-installation-time
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: '${{env.registry}}'
          scope: '@public-ui'
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        id: pnpm-install
        with:
          version: 9

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store
          restore-keys: |
            ${{ runner.os }}-pnpm-store

      - name: Install
        run: pnpm i --no-frozen-lockfile --no-verify-store-integrity

      - name: Configure Git user
        run: |
          git config --local user.email "${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com"
          git config --local user.name "${{ steps.app-token.outputs.app-slug }}[bot]"

      - name: Bump Versions
        run: 'HUSKY=0 npx lerna version ${{github.event.inputs.version}} --preid=rc --no-private --tag-version-prefix="" -m "chore: release %v" -y --force-publish'

      - name: Build
        run: pnpm -r build

      - name: Build and publish schema
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/schema
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true
      - name: Build and publish components
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/components
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true
      - name: Build and publish adapter angular v15
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/adapters/angular/v15
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true
      - name: Build and publish adapter angular v16
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/adapters/angular/v16
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true
      - name: Build and publish adapter angular v17
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/adapters/angular/v17
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true
      - name: Build and publish adapter react
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/adapters/react
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true
      - name: Build and publish adapter react-standalone
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/adapters/react-standalone
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true
      - name: Build and publish adapter solid
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/adapters/solid
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true
      - name: Build and publish adapter vue
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/adapters/vue
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true
      - name: Build and publish adapter preact
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/adapters/preact
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true
      - name: Build and publish adapter hydrate
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/adapters/hydrate
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true
      - name: Build and publish tools kolibri-cli
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/tools/kolibri-cli
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true
      - name: Build and publish theme default
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/themes/default
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true
      - name: Build and publish themes
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/themes
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true
      - name: Build and publish sample react
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/samples/react
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true
      - name: Build and publish tools visual-tests
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/tools/visual-tests
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true

      # deprecated packages
      - name: Build and publish core
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/core
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true

      # packages a obsolete with next major release
      - name: Build and publish create-kolibri
        run: pnpm publish --access ${{env.access}} --no-git-checks --tag ${{env.prefix}}-${{github.event.inputs.tag}}
        working-directory: packages/create-kolibri
        env:
          NODE_AUTH_TOKEN: ${{env.token}}
          NPM_CONFIG_PROVENANCE: true

  publish-page:
    needs: publish
    uses: public-ui/kolibri/.github/workflows/publish-page.yml@release/1.7
